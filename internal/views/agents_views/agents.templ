package agents_views

import (
	"fmt"
	"github.com/doncicuto/openuem-console/internal/views/filters"
	"github.com/doncicuto/openuem-console/internal/views/layout"
	"github.com/doncicuto/openuem-console/internal/views/partials"
	ent "github.com/doncicuto/openuem_ent"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"strconv"
)

templ Agents(c echo.Context, p partials.PaginationAndSort, f filters.AgentFilter, agents []*ent.Agent, tags []*ent.Tag, availableOSes []string, successMessage, errMessage string, refresh int) {
	@partials.Header([]partials.Breadcrumb{{Title: "Agents", Url: "/agents"}})
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		@partials.SuccessMessage(successMessage)
		@partials.ErrorMessage(errMessage, true)
		<div id="error" class="hidden"></div>
		<div id="success" class="hidden"></div>
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-header">
				<h3 class="uk-card-title">{ i18n.T(ctx, "Agents") }</h3>
				<p class="uk-margin-small-top uk-text-small">
					{ i18n.T(ctx, "agents.description") }
				</p>
			</div>
			<div class="uk-card-body flex flex-col gap-4">
				<div class="flex justify-between mt-8">
					@filters.ClearFilters("/agents", "#main", "outerHTML", func() bool {
						return f.Hostname == "" && len(f.AgentEnabledOptions) == 0 &&
							len(f.AgentOSVersions) == 0 && len(f.Tags) == 0 &&
							f.ContactFrom == "" && f.ContactTo == ""
					})
					@partials.RefreshPage("/agents", "#main", "outerHTML", "post", refresh)
				</div>
				if len(agents) > 0 {
					<form class="flex gap-4 mt-5 mb-2 justify-between">
						<input id="page" type="hidden" name="page" value={ strconv.Itoa(p.CurrentPage) }/>
						<input id="pageSize" type="hidden" name="pageSize" value={ strconv.Itoa(p.PageSize) }/>
						<input id="sortBy" type="hidden" name="sortBy" value={ p.SortBy }/>
						<input id="sortOrder" type="hidden" name="sortOrder" value={ p.SortOrder }/>
						<table class="uk-table uk-table-divider uk-table-small uk-table-hover uk-table-striped border border-gray-400!important">
							@AgentsTableHead(c, p, f, tags, availableOSes)
							@AgentsTableBody(agents, tags)
						</table>
					</form>
					if p.NItems / p.PageSize > 1 {
						@partials.Pagination(c, p, "#main", "outerHTML", "[name^='filter']")
					}
				} else {
					<p class="uk-text-small uk-text-muted">
						{ i18n.T(ctx, "agents.no_agents") }
					</p>
				}
			</div>
		</div>
	</main>
}

templ AgentsConfirmDelete(agent *ent.Agent) {
	@partials.Header([]partials.Breadcrumb{{Title: "Agents", Url: "/agents"}, {Title: agent.ID, Url: fmt.Sprintf("/agents/%s", agent.ID)}})
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		@partials.ConfirmDelete(i18n.T(ctx, "confirm.agent_delete"), "/agents", "/agents/"+agent.ID)
		@AgentInfo(agent)
	</main>
}

templ AgentsConfirmDisable(agent *ent.Agent) {
	@partials.Header([]partials.Breadcrumb{{Title: "Agents", Url: "/agents"}, {Title: agent.ID, Url: fmt.Sprintf("/agents/%s", agent.ID)}})
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8 bg-white">
		@partials.ConfirmDisable(i18n.T(ctx, "confirm.agent_disable"), "/agents", "/agents/"+agent.ID+"/disable")
		@AgentInfo(agent)
	</main>
}

templ AgentInfo(agent *ent.Agent) {
	<div class="uk-width-1-2@m uk-card uk-card-default">
		<div class="uk-card-body">
			<table class="uk-table uk-table-striped border border-gray-400!important mt-6">
				<tr><th>{ i18n.T(ctx, "agents.hostname") }</th><td>{ agent.Hostname }</td></tr>
				<tr><th>{ i18n.T(ctx, "agents.last_contact") }</th><td>{ agent.LastContact.Local().String() }</td></tr>
				<tr><th>{ i18n.T(ctx, "OperatingSystem") }</th><td>{ agent.Os }</td></tr>
				<tr><th>{ i18n.T(ctx, "agents.version") }</th><td>{ agent.Edges.Operatingsystem.Version }</td></tr>
				<tr><th>{ i18n.T(ctx, "agents.username") }</th><td>{ agent.Edges.Operatingsystem.Username }</td></tr>
			</table>
		</div>
	</div>
}

templ AgentsIndex(title string, cmp templ.Component) {
	@layout.Base("agents") {
		@cmp
	}
}

templ AgentsTableHead(c echo.Context, p partials.PaginationAndSort, f filters.AgentFilter, tags []*ent.Tag, availableOSes []string) {
	<thead>
		<tr>
			<th class="w-1/6">
				<div class="flex gap-1 items-center">
					<span>{ i18n.T(ctx, "agents.hostname") }</span>
					@partials.SortByColumnIcon(c, p, "hostname", "alpha", "#main", "outerHTML", "")
					@filters.FilterByText("Hostname", f.Hostname, "agents.filter_by_hostname", "/agents", "#main", "outerHTML")
				</div>
			</th>
			<th class="w-1/12">
				<div class="flex gap-1 items-center">
					<span>{ i18n.T(ctx, "Status") }</span>
					@partials.SortByColumnIcon(c, p, "enabled", "alpha", "#main", "outerHTML", "")
					@filters.FilterByOptions("EnabledAgent", "agents.filter_by_enabled", []string{"Enabled", "Disabled"}, f.AgentEnabledOptions, "/agents", "#main", "outerHTML", true, func() bool {
						return len(f.AgentEnabledOptions) == 0
					})
				</div>
			</th>
			<th class="w-1/12">
				<div class="flex gap-1 items-center">
					<span>{ i18n.T(ctx, "agents.os") }</span>
					@partials.SortByColumnIcon(c, p, "os", "alpha", "#main", "outerHTML", "")
					@filters.FilterByOptions("AgentOS", "agents.filter_by_agent_os", availableOSes, f.AgentOSVersions, "/agents", "#main", "outerHTML", false, func() bool {
						return len(f.AgentOSVersions) == 0
					})
				</div>
			</th>
			<th class="w-1/12">
				<div class="flex gap-1 items-center">
					<span>{ i18n.T(ctx, "agents.version") }</span>
					@partials.SortByColumnIcon(c, p, "version", "alpha", "#main", "outerHTML", "")
				</div>
			</th>
			<th class="w-1/6">
				<div class="flex gap-1 items-center">
					<span>{ i18n.T(ctx, "IP Address") }</span>
					@partials.SortByColumnIcon(c, p, "ip_address", "alpha", "#main", "outerHTML", "")
				</div>
			</th>
			<th class="w-1/4">
				<div class="flex gap-1 items-center">
					{ i18n.T(ctx, "Tag.other") }
					@filters.FilterByTags(f, "/agents", "#main", "outerHTML", tags, func() bool { return len(f.Tags) == 0 })
				</div>
			</th>
			<th class="w-1/6">
				<div class="flex gap-1 items-center">
					<span>{ i18n.T(ctx, "agents.last_contact") }</span>
					@partials.SortByColumnIcon(c, p, "last_contact", "time", "#main", "outerHTML", "")
					@filters.FilterByDate("Contact", "agents.filter_by_last_contact", f.ContactFrom, f.ContactTo, "/agents", "#main", "outerHTML", func() bool { return f.ContactFrom == "" && f.ContactTo == "" })
				</div>
			</th>
			<th>
				<div class="flex gap-1 items-center">
					<span class="sr-only">{ i18n.T(ctx, "Actions") }</span>
				</div>
			</th>
		</tr>
	</thead>
}

templ AgentsTableBody(agents []*ent.Agent, tags []*ent.Tag) {
	for _, agent := range agents {
		<tr>
			<td
				class="!align-middle underline hover:cursor-pointer"
				hx-get={ string(templ.URL(fmt.Sprintf("/computers/%s", agent.ID))) }
				hx-push-url="true"
				hx-target="#main"
				hx-swap="outerHTML"
			>{ agent.Hostname }</td>
			<td class="!align-middle">
				if agent.Enabled {
					<uk-icon hx-history="false" icon="check" custom-class="h-6 w-6 pr-2 text-green-600" uk-cloack></uk-icon>
				} else {
					<uk-icon hx-history="false" icon="x" custom-class="h-6 w-6 pr-2 text-red-600" uk-cloack></uk-icon>
				}
			</td>
			<td class="!align-middle">
				switch agent.Os {
					case "windows":
						<i class="ri-windows-fill ri-2x text-blue-600"></i>
					case "linux":
						<span></span>
				}
			</td>
			<td class="!align-middle">{ agent.Version }</td>
			<td class="!align-middle">{ agent.IP }</td>
			<td class="flex flex-wrap gap-2">
				@partials.ShowAppliedTags(agent.Edges.Tags, agent.ID, "/agents", "#main", "outerHTML")
				@partials.AddTagButton(tags, agent.Edges.Tags, agent.ID, "/agents", "post", "#main", "outerHTML")
			</td>
			<td class="!align-middle">{ agent.LastContact.Local().Format("02/01/2006 15:04:05") }</td>
			<td class="!align-middle">
				@AddActionsButton(agent)
			</td>
		</tr>
	}
}

templ AddActionsButton(agent *ent.Agent) {
	@partials.MoreButton()
	<div class="uk-drop uk-dropdown" uk-dropdown="mode: click">
		<ul class="uk-dropdown-nav uk-nav">
			if agent.Enabled {
				<li>
					<a
						hx-post={ string(templ.URL(fmt.Sprintf("/agents/%s/forcereport", agent.ID))) }
						hx-target="#main"
						hx-swap="outerHTML"
					>
						<uk-icon hx-history="false" icon="circle-play" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>
						{ i18n.T(ctx, "agents.force_run") }
					</a>
				</li>
			}
			<li>
				if agent.Enabled {
					<a
						hx-get={ string(templ.URL(fmt.Sprintf("/agents/%s/disable", agent.ID))) }
						hx-target="#main"
						hx-swap="outerHTML"
					>
						<uk-icon hx-history="false" icon="megaphone-off" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>
						{ i18n.T(ctx, "Disable") }
					</a>
				} else {
					<a
						hx-post={ string(templ.URL(fmt.Sprintf("/agents/%s/enabled", agent.ID))) }
						hx-target="#main"
						hx-swap="outerHTML"
						hx-indicator="#enable-spinner"
					>
						<uk-icon hx-history="false" icon="megaphone" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>
						{ i18n.T(ctx, "Enabled") }
						<div id="enable-spinner" class="ml-2 htmx-indicator" hx-history="false" uk-spinner="ratio: 0.5" uk-spinner></div>
					</a>
				}
			</li>
			if agent.IP != "" && agent.Enabled && agent.Vnc != "" {
				<li>
					<a
						hx-get={ string(templ.URL(fmt.Sprintf("/computers/%s/remote-assistance", agent.ID))) }
						hx-push-url="true"
						hx-target="#main"
						hx-swap="outerHTML"
					><uk-icon hx-history="false" icon="monitor-play" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon> { i18n.T(ctx, "Remote Assistance") }</a>
				</li>
			}
			if len(agent.MAC) > 0 {
				<li>
					<a
						hx-get={ string(templ.URL(fmt.Sprintf("/computers/%s/wol", agent.ID))) }
						hx-target="#main"
						hx-swap="outerHTML"
					>
						<uk-icon hx-history="false" icon="alarm-clock" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>
						{ i18n.T(ctx, "agents.wol_title") }
					</a>
				</li>
			}
			<li>
				<a
					hx-get={ string(templ.URL(fmt.Sprintf("/agents/%s/delete", agent.ID))) }
					hx-target="#main"
					hx-swap="outerHTML"
				><uk-icon hx-history="false" icon="trash-2" custom-class="h-6 w-6 pr-2 text-red-600" uk-cloack></uk-icon>{ i18n.T(ctx, "Delete") }</a>
			</li>
		</ul>
	</div>
}

package software_views

import (
	"github.com/doncicuto/openuem-console/internal/models"
	"github.com/doncicuto/openuem-console/internal/views/layout"
	"github.com/doncicuto/openuem-console/internal/views/partials"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"strconv"
	"strings"
)

templ Software(apps []models.App, c echo.Context, currentPage, itemsPerPage, totalItems int, sortBy, sortOrder string) {
	@partials.Header([]partials.Breadcrumb{{Title: i18n.T(ctx, "Software", i18n.Default("Software")), Url: "/software"}})
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-header">
				<h3 class="uk-card-title">{ i18n.T(ctx, "apps.title") }</h3>
				<p class="uk-margin-small-top uk-text-small">
					{ i18n.T(ctx, "apps.description") }
				</p>
			</div>
			<div class="uk-card-body">
				if len(apps) > 0 {
					<table class="uk-table uk-table-divider uk-table-small uk-table-striped">
						<thead>
							<tr>
								<th><span class="sr-only">{ i18n.T(ctx, "apps.logo") }</span></th>
								<th>
									<div class="flex gap-2 items-center">
										<span>{ i18n.T(ctx, "apps.name") }</span>
										@partials.SortByColumnIcon(c, currentPage, itemsPerPage, sortBy, "name", sortOrder, "alpha")
									</div>
								</th>
								<th>
									<div class="flex gap-2 items-center">
										<span>{ i18n.T(ctx, "apps.publisher") }</span>
										@partials.SortByColumnIcon(c, currentPage, itemsPerPage, sortBy, "publisher", sortOrder, "alpha")
									</div>
								</th>
								<th>
									<div class="flex gap-2 items-center">
										<span>{ i18n.T(ctx, "apps.num_installations") }</span>
										@partials.SortByColumnIcon(c, currentPage, itemsPerPage, sortBy, "installations", sortOrder, "numeric")
									</div>
								</th>
							</tr>
						</thead>
						for _, app := range apps {
							<tr class="h-16">
								<td class="uk-width-1-6 text-center !align-middle">
									@partials.Brand(strings.ToLower(app.Name), "")
								</td>
								<td class="uk-width-1-3 !align-middle">{ app.Name }</td>
								<td class="uk-width-1-3 !align-middle">{ app.Publisher }</td>
								<td class="uk-width-1-6 !align-middle">{ strconv.Itoa(app.Count) }</td>
							</tr>
						}
						if len(apps) < itemsPerPage {
							for i:=0; i < itemsPerPage - len(apps); i++ {
								<tr class="h-16">
									<td class="uk-width-1-6 text-center !align-middle">-</td>
									<td class="uk-width-1-3 !align-middle">-</td>
									<td class="uk-width-1-3 !align-middle">-</td>
									<td class="uk-width-1-6 !align-middle">-</td>
								</tr>
							}
						}
					</table>
					@partials.Pagination(c, currentPage, len(apps), itemsPerPage, totalItems, sortBy, sortOrder)
				} else {
					<p class="uk-text-small uk-text-muted my-4">
						{ i18n.T(ctx, "apps.no_apps") }
					</p>
				}
			</div>
		</div>
	</main>
}

templ SoftwareIndex(title string, cmp templ.Component) {
	@layout.Base("software") {
		@cmp
	}
}

package software_views

import (
	"github.com/doncicuto/openuem-console/internal/models"
	"github.com/doncicuto/openuem-console/internal/views/filters"
	"github.com/doncicuto/openuem-console/internal/views/layout"
	"github.com/doncicuto/openuem-console/internal/views/partials"
	"github.com/gohugoio/locales"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"strconv"
	"strings"
)

templ Software(c echo.Context, p partials.PaginationAndSort, f filters.ApplicationsFilter, l locales.Translator, apps []models.App, refresh int) {
	@partials.Header([]partials.Breadcrumb{{Title: i18n.T(ctx, "Software", i18n.Default("Software")), Url: "/software"}})
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-header">
				<h3 class="uk-card-title">{ i18n.T(ctx, "apps.title") }</h3>
				<p class="uk-margin-small-top uk-text-small">
					{ i18n.T(ctx, "apps.description") }
				</p>
			</div>
			<div class="uk-card-body flex flex-col gap-4">
				<div class="flex justify-between mt-8">
					@filters.ClearFilters("/software", "#main", "outerHTML", func() bool {
						return f.AppName == "" && f.Vendor == ""
					})
					@partials.RefreshPage(l, "/software", "#main", "outerHTML", "get", refresh, true)
				</div>
				if len(apps) > 0 {
					<table class="uk-table uk-table-divider uk-table-small uk-table-striped border border-gray-400!important">
						<thead>
							<tr>
								<th><span class="sr-only">{ i18n.T(ctx, "apps.logo") }</span></th>
								<th>
									<div class="flex gap-1 items-center">
										<span>{ i18n.T(ctx, "apps.name") }</span>
										@partials.SortByColumnIcon(c, p, i18n.T(ctx, "apps.name"), "name", "alpha", "#main", "outerHTML")
										@filters.FilterByText(c, p, "AppName", f.AppName, "apps.filter_by_name", "#main", "outerHTML")
									</div>
								</th>
								<th>
									<div class="flex gap-1 items-center">
										<span>{ i18n.T(ctx, "apps.publisher") }</span>
										@partials.SortByColumnIcon(c, p, i18n.T(ctx, "apps.publisher"), "publisher", "alpha", "#main", "outerHTML")
										@filters.FilterByText(c, p, "AppPublisher", f.Vendor, "apps.filter_by_publisher", "#main", "outerHTML")
									</div>
								</th>
								<th>
									<div class="flex gap-1 items-center justify-center">
										<span>{ i18n.T(ctx, "apps.num_installations") }</span>
										@partials.SortByColumnIcon(c, p, i18n.T(ctx, "apps.num_installations"), "installations", "numeric", "#main", "outerHTML")
									</div>
								</th>
							</tr>
						</thead>
						for _, app := range apps {
							<tr class="h-16">
								<td class="uk-width-1-6 text-center !align-middle">
									@partials.Brand(strings.ToLower(app.Name), "")
								</td>
								<td class="uk-width-1-3 !align-middle">{ app.Name }</td>
								<td class="uk-width-1-3 !align-middle">{ app.Publisher }</td>
								<td class="uk-width-1-6 !align-middle text-center">
									<form>
										<input type="hidden" id="filterByApplication" name="filterByApplication" value={ app.Name }/>
										<span
											class="underline cursor-pointer"
											hx-post="/computers"
											hx-push-url="true"
											hx-target="#main"
											hx-swap="outerHTML"
											_="on htmx:configRequest
													set event.detail.parameters['sortBy'] to 'hostname'
												end"
										>
											{ strconv.Itoa(app.Count) }
										</span>
									</form>
								</td>
							</tr>
						}
						if len(apps) < p.PageSize {
							for i:=0; i < p.PageSize - len(apps); i++ {
								<tr class="h-16">
									<td class="uk-width-1-6 text-center !align-middle">-</td>
									<td class="uk-width-1-3 !align-middle">-</td>
									<td class="uk-width-1-3 !align-middle">-</td>
									<td class="uk-width-1-6 !align-middle">-</td>
								</tr>
							}
						}
					</table>
					@partials.Pagination(c, p, "#main", "outerHTML", "[name^='filter']")
				} else {
					<p class="uk-text-small uk-text-muted">
						{ i18n.T(ctx, "apps.no_apps") }
					</p>
				}
			</div>
		</div>
	</main>
}

templ SoftwareIndex(title string, cmp templ.Component) {
	@layout.Base("software") {
		@cmp
	}
}

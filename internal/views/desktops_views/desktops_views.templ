package desktops_views

import (
	"fmt"
	"github.com/doncicuto/openuem-console/internal/models"
	"github.com/doncicuto/openuem-console/internal/views/layout"
	"github.com/doncicuto/openuem-console/internal/views/partials"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"strings"
)

templ Desktops(c echo.Context, p partials.PaginationAndSort, agents []models.Desktop) {
	@partials.Header([]partials.Breadcrumb{{Title: "Desktops", Url: "/desktops"}})
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-header">
				<h3 class="uk-card-title"><span>{ i18n.T(ctx, "Desktops") }</span></h3>
				<p class="uk-margin-small-top uk-text-small">
					{ i18n.T(ctx, "desktops.description") }
				</p>
			</div>
			<div class="uk-card-body">
				<form class="flex gap-4 mt-5 mb-2"></form>
				if len(agents) > 0 {
					<table class="uk-table uk-table-divider uk-table-small uk-table-striped border border-gray-400!important">
						<thead>
							<tr>
								<th>
									<div class="flex gap-2 items-center">
										<span>{ i18n.T(ctx, "agents.hostname") }</span>
										@partials.SortByColumnIcon(c, p, "hostname", "alpha", "#main", "outerHTML", "")
									</div>
								</th>
								<th>
									<div class="flex gap-2 items-center">
										<span>{ i18n.T(ctx, "agents.os") }</span>
										@partials.SortByColumnIcon(c, p, "os", "alpha", "#main", "outerHTML", "")
									</div>
								</th>
								<th>
									<div class="flex gap-2 items-center">
										<span>{ i18n.T(ctx, "agents.version") }</span>
										@partials.SortByColumnIcon(c, p, "version", "alpha", "#main", "outerHTML", "")
									</div>
								</th>
								<th>
									<div class="flex gap-2 items-center">
										<span>{ i18n.T(ctx, "agents.username") }</span>
										@partials.SortByColumnIcon(c, p, "username", "alpha", "#main", "outerHTML", "")
									</div>
								</th>
								<th>
									<div class="flex gap-2 items-center justify-center">
										<span>{ i18n.T(ctx, "agents.manufacturer") }</span>
										@partials.SortByColumnIcon(c, p, "manufacturer", "alpha", "#main", "outerHTML", "")
									</div>
								</th>
								<th class="flex gap-2 items-center">
									<span>{ i18n.T(ctx, "agents.model") }</span>
									@partials.SortByColumnIcon(c, p, "model", "alpha", "#main", "outerHTML", "")
								</th>
								<th>
									<div class="flex gap-2 items-center">
										<span>{ i18n.T(ctx, "Tag.other") }</span>
									</div>
								</th>
								<th><span class="sr-only">{ i18n.T(ctx, "Actions") }</span></th>
							</tr>
						</thead>
						for _, agent := range agents {
							<tr class="h-16">
								<td
									class="!align-middle underline cursor-pointer"
									hx-get={ string(templ.URL(fmt.Sprintf("/desktops/%s", agent.ID))) }
									hx-push-url="true"
									hx-target="#main"
									hx-swap="outerHTML"
								>{ agent.Hostname }</td>
								switch agent.OS {
									case "windows":
										<td class="!align-middle"><i class="ri-windows-fill ri-2x text-blue-600"></i></td>
									case "linux":
										<td></td>
								}
								<td class="!align-middle">{ agent.Version } </td>
								<td class="!align-middle">{ agent.Username } </td>
								<td class="!align-middle text-center">
									@partials.Manufacturer(strings.ToLower(agent.Manufacturer))
								</td>
								<td class="!align-middle">
									if agent.Model == "Unknown" {
										{ i18n.T(ctx, "Unknown") }
									} else {
										{ agent.Model }
									}
								</td>
								<td class="!align-middle"></td>
								<td class="!align-middle">
									<button type="button"><uk-icon hx-history="false" icon="ellipsis" custom-class="h-5 w-5" uk-cloack></uk-icon></button>
									<div class="uk-drop uk-dropdown" uk-dropdown="mode: click">
										<ul class="uk-dropdown-nav uk-nav">
											<li>
												<a
													hx-get={ string(templ.URL(fmt.Sprintf("/desktops/%s", agent.ID))) }
													hx-push-url="true"
													hx-target="#main"
													hx-swap="outerHTML"
												><uk-icon hx-history="false" icon="eye" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon> { i18n.T(ctx, "View") }</a>
											</li>
											<li>
												<a
													hx-get={ string(templ.URL(fmt.Sprintf("/desktops/%s?delete=true", agent.ID))) }
													hx-push-url="true"
													hx-target="#main"
													hx-swap="outerHTML"
												><uk-icon hx-history="false" icon="trash-2" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon> { i18n.T(ctx, "Delete") }</a>
											</li>
											if agent.IP != "" {
												<li>
													<a
														hx-get={ string(templ.URL(fmt.Sprintf("/desktops/%s/remote-assistance", agent.ID))) }
														hx-push-url="true"
														hx-target="#main"
														hx-swap="outerHTML"
													><uk-icon hx-history="false" icon="monitor-play" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon> { i18n.T(ctx, "Remote Assistance") }</a>
												</li>
											}
											if len(agent.MAC) > 0 {
												<li>
													<a
														hx-get={ string(templ.URL(fmt.Sprintf("/desktops/%s/wol", agent.ID))) }
														hx-target="#main"
														hx-swap="outerHTML"
													>
														<uk-icon hx-history="false" icon="alarm-clock" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>
														{ i18n.T(ctx, "agents.wol_title") }
													</a>
												</li>
											}
										</ul>
									</div>
								</td>
							</tr>
						}
					</table>
				} else {
					<p class="uk-text-small uk-text-muted mt-6 mb-4">
						{ i18n.T(ctx, "agents.no_agents") }
					</p>
				}
			</div>
		</div>
	</main>
}

templ InventoryIndex(title string, cmp templ.Component) {
	@layout.Base("desktops") {
		@cmp
	}
}

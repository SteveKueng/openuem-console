package admin_views

import (
	"fmt"
	"github.com/doncicuto/openuem-console/internal/views/filters"
	"github.com/doncicuto/openuem-console/internal/views/layout"
	"github.com/doncicuto/openuem-console/internal/views/partials"
	"github.com/doncicuto/openuem_ent"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"golang.org/x/mod/semver"
	"strconv"
)

type Version struct {
	ID              string `json:"id,omitempty"`
	Channel         string `json:"channel,omitempty"`
	Summary         string `json:"summary,omitempty"`
	ReleaseNotesURL string `json:"release_notes,omitempty"`
	FileURL         string `json:"file_url,omitempty"`
	Checksum        string `json:"checksum,omitempty"`
	IsCritical      bool   `json:"is_critical,omitempty"`
}

templ UpdateAgents(c echo.Context, p partials.PaginationAndSort, f filters.AgentFilter, agents []*openuem_ent.Agent, settings *openuem_ent.Settings, version *Version, higherVersion string, versions, availableOSes []string, tags []*openuem_ent.Tag, refresh int, successMessage, errorMessage string) {
	@partials.Header([]partials.Breadcrumb{{Title: "Admin", Url: "/admin/users"}, {Title: i18n.T(ctx, "admin.update.agents.title"), Url: "/admin/update-agents"}})
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@ConfigNavbar("update-agents")
				if successMessage != "" {
					@partials.SuccessMessage(successMessage)
				} else {
					<div id="success" class="hidden"></div>
				}
				if errorMessage != "" {
					@partials.ErrorMessage(errorMessage, true)
				} else {
					<div id="error" class="hidden"></div>
				}
				<div id="confirm" class="hidden"></div>
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<h3 class="uk-card-title">{ i18n.T(ctx, "admin.update.agents.title") } </h3>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "admin.update.agents.description") }
						</p>
					</div>
					<div class="uk-card-body">
						<div class="flex flex-col gap-4 mt-4">
							if version == nil {
								@GetVersionError()
							}
							if version != nil {
								<div class="flex items-center justify-between">
									if semver.Compare("v" + version.ID, "v" + higherVersion) == 1 {
										<p class={ "rounded-full px-4 py-1 text-white", templ.KV("bg-red-500", version.IsCritical), templ.KV("bg-blue-700", !version.IsCritical) }>
											if version.IsCritical {
												{ i18n.T(ctx, "admin.update.agents.critical") }
											} else {
												{ i18n.T(ctx, "admin.update.agents.available") }
											}
										</p>
									} else {
										<p class="rounded-full px-4 py-1 text-white bg-green-600">{ i18n.T(ctx, "admin.update.agents.current") }</p>
									}
									<form class="flex items-center gap-4">
										<input id="filterBySelectedItems" type="hidden" name="filterBySelectedItems" value={ strconv.Itoa(f.SelectedItems) }/>
										<input id="selectedAgents" type="hidden" name="selectedAgents"/>
										<input name="version" type="hidden" value={ version.ID }/>
										<button
											id="update-all-button"
											title={ i18n.T(ctx, "UpdateAll") }
											type="button"
											class="uk-button uk-button-default"
											hx-post="/admin/update-agents/confirm"
											hx-push-url="false"
											hx-target="#main"
											hx-swap="outerHTML"
											disabled?={ f.SelectedItems == 0 }
										>
											<div class="flex items-center gap-2">
												<uk-icon hx-history="false" icon="arrows-up-from-line" custom-class="h-5 w-5" uk-cloack></uk-icon>
												{ i18n.T(ctx, "Update") }
											</div>
										</button>
										<button
											id="rollback-all-button"
											title={ i18n.T(ctx, "RollbackAll") }
											type="button"
											class="uk-button uk-button-default"
											hx-post="/admin/rollback-agents/confirm"
											hx-push-url="true"
											hx-target="#main"
											hx-swap="outerHTML"
											disabled?={ f.SelectedItems == 0 }
										>
											<div class="flex items-center gap-2">
												<uk-icon hx-history="false" icon="arrows-up-from-line" custom-class="h-5 w-5 rotate-180" uk-cloack></uk-icon>
												{ i18n.T(ctx, "Rollback") }
											</div>
										</button>
									</form>
								</div>
								<p class="uk-text-small">
									if semver.Compare("v" + version.ID, "v" + higherVersion) == 1 {
										{ i18n.T(ctx, "admin.update.agents.new_version_available") }
									} else {
										{ i18n.T(ctx, "admin.update.agents.no_new_version_available") }
									}
									<a href={ templ.URL(version.ReleaseNotesURL) } class="underline uk-text-default uk-text-bold text-blue-700" target="_blank" rel="noopener">{ version.ID }</a>
								</p>
								<p class="uk-text-small uk-text-italic">{ version.Summary } </p>
							}
							<hr class="uk-divider-icon"/>
							<div class="flex items-center gap-4">
								@partials.RefreshPage("/admin/update-agents", "#main", "outerHTML", "get", refresh, false)
								@filters.ClearFilters("/admin/update-agents", "#main", "outerHTML", func() bool {
									return f.Hostname == "" && len(f.Versions) == 0 && len(f.AgentOSVersions) == 0 && len(f.Tags) == 0
								})
								<button
									id="select-all"
									title={ i18n.T(ctx, "SelectAll") }
									type="button"
									class="uk-button uk-button-default flex items-center gap-2"
									_={ fmt.Sprintf(`on click 
												repeat in <input[type='checkbox']/>
													if it.checked is false then
														it.click()
													end
												end
												set storedItems to %s as Array
												set sessionStorage.selectedAgents to storedItems as JSON
												set #filterBySelectedItems.value to '%d'
												set #items-selected.innerHTML to '%d'
												remove @disabled from <button[id$=-all-button]/>
											end`, f.SelectedAllAgents, p.NItems, p.NItems) }
								>
									{ i18n.T(ctx, "SelectAll") }
								</button>
								<button
									id="deselect-all"
									title={ i18n.T(ctx, "DeselectAll") }
									type="button"
									class="uk-button uk-button-default flex items-center gap-2"
									_="on click 
										repeat in <input[type='checkbox']/>
											if it.checked is true then
												it.click()
											end
										end
										set storedItems to [] as Array
										set sessionStorage.selectedAgents to storedItems as JSON
										set #filterBySelectedItems.value to '0'
										set #items-selected.innerHTML to '0'
										add @disabled to <button[id$=-all-button]/>
									end"
								>
									{ i18n.T(ctx, "DeselectAll") }
								</button>
								<p class="uk-text-small">{ "Se han seleccionado " } <span id="items-selected" class="uk-text-bold">{ strconv.Itoa(f.SelectedItems) }</span> { " elementos" }</p>
							</div>
							if len(agents) > 0 {
								<div class="flex flex-col gap-2">
									<table
										class="uk-table uk-table-divider uk-table-small uk-table-hover uk-table-striped border border-gray-400!important mt-4"
										_="on load
											if #filterBySelectedItems.value is '0' then
												set storedItems to [] as Array
												set sessionStorage.selectedAgents to storedItems as JSON
											end
										end"
									>
										<thead>
											<tr>
												<th>
													<input
														id="select-all-in-page"
														name="select-all-in-page"
														class="uk-checkbox"
														type="checkbox"
														_="on click
															repeat in <input[title='check-agent']/>																
																if it.checked !== #select-all-in-page.checked then
																	it.click()
																end
															end

															if ((<input[title='check-agent']:checked/>).length > 0) then
																remove @disabled from <button[id$='-all-button']/>
															else
																add @disabled to <button[id$='-all-button']/>
															end
														"
													/>
												</th>
												<th>
													<div class="flex gap-1 items-center">
														<span>{ i18n.T(ctx, "agents.hostname") }</span>
														@partials.SortByColumnIcon(c, p, i18n.T(ctx, "agents.hostname"), "hostname", "alpha", "#main", "outerHTML")
														@filters.FilterByText(c, p, "Hostname", f.Hostname, "agents.filter_by_hostname", "#main", "outerHTML")
													</div>
												</th>
												<th>
													<div class="flex gap-1 items-center">
														<span>{ i18n.T(ctx, "agents.version") }</span>
														@partials.SortByColumnIcon(c, p, i18n.T(ctx, "agents.version"), "version", "alpha", "#main", "outerHTML")
														@filters.FilterByOptions(c, p, "Version", "Version", versions, f.Versions, "#main", "outerHTML", false, func() bool {
															return len(f.Versions) == 0
														})
													</div>
												</th>
												<th>
													<div class="flex gap-1 items-center">
														<span>{ i18n.T(ctx, "agents.os") }</span>
														@partials.SortByColumnIcon(c, p, i18n.T(ctx, "agents.os"), "os", "alpha", "#main", "outerHTML")
														@filters.FilterByOptions(c, p, "AgentOS", "agents.filter_by_agent_os", availableOSes, f.AgentOSVersions, "#main", "outerHTML", false, func() bool {
															return len(f.AgentOSVersions) == 0
														})
													</div>
												</th>
												<th>
													<div class="flex gap-1 items-center">
														{ i18n.T(ctx, "Tag.other") }
														@filters.FilterByTags(c, p, f, "#main", "outerHTML", tags, func() bool { return len(f.Tags) == 0 })
													</div>
												</th>
												<th>
													{ i18n.T(ctx, "admin.update.agents.task_status") }
												</th>
												<th>
													{ i18n.T(ctx, "admin.update.agents.task_description") }
												</th>
												<th>
													{ i18n.T(ctx, "admin.update.agents.task_last_execution") }
												</th>
												<th>
													{ i18n.T(ctx, "admin.update.agents.task_result") }
												</th>
											</tr>
										</thead>
										for _, agent := range agents {
											<tr>
												<td class="!align-middle">
													<input
														title="check-agent"
														name={ agent.ID }
														class="uk-checkbox"
														type="checkbox"
														_={ fmt.Sprintf(`
															on click
																set storedItems to [] as Array
																if sessionStorage.selectedAgents exists then														
																	set storedItems to sessionStorage.selectedAgents as Object
																end																								

																set index to storedItems.indexOf(my name)		
																if me.checked then
																	increment #filterBySelectedItems.value by 1
																	set #items-selected.innerHTML to #filterBySelectedItems.value
																	if index < 0 then 															
																		append my name to storedItems
																		set sessionStorage.selectedAgents to storedItems as JSON
																	end														
																else
																	decrement #filterBySelectedItems.value by 1
																	set #items-selected.innerHTML to #filterBySelectedItems.value
																	set index to storedItems.indexOf(my name)														
																	if index >= 0 then 															
																		get storedItems.splice(index, 1)															
																	end															
																	
																	if no storedItems then 
																		set storedItems to [] as Array
																		set #filterBySelectedItems.value to '0'
																	end

																	set sessionStorage.selectedAgents to storedItems as JSON 
																end

																if ((<input[title='check-agent']:checked/>).length > 0 or storedItems.length > 0) then
																	remove @disabled from <button[id$='-all-button']/>
																else
																	add @disabled to <button[id$='-all-button']/>
																end

																if #select-all-in-page.checked is true and me.checked is false then
																	set #select-all-in-page.checked to false
																end

																if #select-all-in-page.checked is false and (<input[title='check-agent']:checked/>).length === %d then
																	set #select-all-in-page.checked to true
																end

																set #selectedAgents.value to storedItems.length
															end

															on load
																set storedItems to [] as Array
																if sessionStorage.selectedAgents exists then
																	set storedItems to sessionStorage.selectedAgents as Object												
																end

																set index to storedItems.indexOf(my name)														
																if index >= 0 then
																	set me.checked to true
																end

																if ((<input[title='check-agent']:checked/>).length == (<input[title='check-agent']/>).length) then
																	set #select-all-in-page.checked to true
																end

																set #selectedAgents.value to storedItems.length
															end
														`,p.PageSize) }
													/>
												</td>
												<td class="!align-middle">{ agent.Hostname }</td>
												<td class="flex items-center gap-2 !align-middle">
													{ agent.Version }
													if semver.Compare("v" + agent.Version, "v"+ higherVersion) < 0 {
														<div uk-tooltip={ i18n.T(ctx, "admin.update.agents.outdated") }>
															<uk-icon hx-history="false" icon="triangle-alert" custom-class="h-5 w-5 text-red-600" uk-cloack></uk-icon>
														</div>
													}
												</td>
												<td class="!align-middle">
													switch agent.Os {
														case "windows":
															<i class="ri-windows-fill ri-2x text-blue-600"></i>
														case "linux":
															<span></span>
													}
												</td>
												<td class="flex flex-wrap gap-2">
													@partials.ShowAppliedTags(agent.Edges.Tags, agent.ID, p, "/agents", "#main", "outerHTML")
												</td>
												if len(agent.UpdateTaskStatus) > 0 {
													<td class="!align-middle">{ i18n.T(ctx, agent.UpdateTaskStatus) }</td>
												} else {
													<td class="!align-middle"></td>
												}
												if len(agent.UpdateTaskDescription) > 0 {
													<td class="!align-middle">
														{ i18n.T(ctx, agent.UpdateTaskDescription) }
														<span class="uk-text-bold">{ agent.UpdateTaskVersion }</span>
													</td>
												} else {
													<td class="!align-middle"></td>
												}
												if !agent.UpdateTaskExecution.IsZero() {
													<td class="!align-middle">
														{ agent.UpdateTaskExecution.Format("02/01/2006 15:04:05") }
													</td>
												} else {
													<td class="!align-middle"></td>
												}
												<td class="!align-middle">
													{ agent.UpdateTaskResult }
												</td>
											</tr>
										}
									</table>
								</div>
								@partials.Pagination(c, p, "#main", "outerHTML", "[name=search]")
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ GetVersionError() {
	<div id="error-getting-version" class="mt-6">
		<div
			class="uk-alert uk-animation-fade  border-red-700 bg-red-600 text-white "
			uk-alert="animation:true"
		>
			<a href class="uk-alert-close" uk-close _="on click toggle .hidden on #error-getting-version"></a>
			<div class="flex gap-2 items-center uk-alert-description">
				<uk-icon hx-history="false" icon="triangle-alert" custom-class="h-8 w-8 pr-2" uk-cloack></uk-icon>
				<span>{ i18n.T(ctx, "admin.update.agents.get_version_error") }</span>
			</div>
		</div>
	</div>
}

templ UpdateAgentsIndex(title string, cmp templ.Component) {
	@layout.Base("admin") {
		@cmp
	}
}

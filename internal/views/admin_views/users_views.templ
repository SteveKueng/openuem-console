package admin_views

import (
	"fmt"
	"github.com/doncicuto/openuem-console/internal/views/filters"
	"github.com/doncicuto/openuem-console/internal/views/layout"
	"github.com/doncicuto/openuem-console/internal/views/partials"
	"github.com/doncicuto/openuem_ent"
	ent "github.com/doncicuto/openuem_ent"
	"github.com/doncicuto/openuem_nats"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"strconv"
	"strings"
)

templ Users(c echo.Context, users []*ent.User, p partials.PaginationAndSort, f filters.UserFilter, successMessage, errMessage string, refresh int) {
	@partials.Header([]partials.Breadcrumb{{Title: "Admin", Url: "/admin/users"}, {Title: "Users", Url: "/admin/users"}})
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@ConfigNavbar("users")
				@partials.SuccessMessage(successMessage)
				@partials.ErrorMessage(errMessage, true)
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<h3 class="uk-card-title">{ i18n.T(ctx, "users.title") } </h3>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "users.description") }
						</p>
					</div>
					<div class="uk-card-body flex flex-col gap-4">
						<div class="flex justify-between mt-8">
							@filters.ClearFilters("/admin", "#main", "outerHTML", func() bool {
								return f.Username == "" && f.Name == "" && f.Email == "" && f.Phone == "" &&
									f.CreatedFrom == "" && f.CreatedTo == "" && f.ModifiedFrom == "" && f.ModifiedTo == "" &&
									len(f.RegisterOptions) == 0
							})
							@partials.RefreshPage("/admin", "#main", "outerHTML", "post", refresh)
						</div>
						if len(users) > 0 {
							<div class="uk-flex uk-flex-right@s uk-width-1-1@s gap-4 my-4">
								/* <button
									hx-get={ "/admin/users/new" }
									hx-target="#main"
									hx-swap="outerHTML"
									class="uk-button bg-slate-500 hover:bg-slate-400 text-white"
								>
									<uk-icon icon="file-up" class="mr-2"></uk-icon>{ i18n.T(ctx, "users.import") }
								</button> */
								<button
									hx-get={ "/admin/users/new" }
									hx-target="#main"
									hx-swap="outerHTML"
									class="uk-button uk-button-primary text-white"
								>
									<uk-icon icon="user-plus" class="mr-2"></uk-icon>{ i18n.T(ctx, "users.add") }
								</button>
							</div>
							<form class="flex gap-4 mb-2 justify-between">
								<input id="page" type="hidden" name="page" value={ strconv.Itoa(p.CurrentPage) }/>
								<input id="pageSize" type="hidden" name="pageSize" value={ strconv.Itoa(p.PageSize) }/>
								<input id="sortBy" type="hidden" name="sortBy" value={ p.SortBy }/>
								<input id="sortOrder" type="hidden" name="sortOrder" value={ p.SortOrder }/>
								<table class="uk-table uk-table-divider uk-table-small uk-table-hover uk-table-striped border border-gray-400!important">
									<thead>
										<tr>
											<th>
												<div class="flex gap-1 items-center">
													<span>{ i18n.T(ctx, "users.uid") }</span>
													@partials.SortByColumnIcon(c, p, "uid", "alpha", "#main", "outerHTML", "")
													@filters.FilterByText("Username", f.Username, "users.filter_by_username", "/admin", "#main", "outerHTML")
												</div>
											</th>
											<th>
												<div class="flex gap-1 items-center">
													<span>{ i18n.T(ctx, "users.name") }</span>
													@partials.SortByColumnIcon(c, p, "name", "alpha", "#main", "outerHTML", "")
													@filters.FilterByText("Name", f.Name, "users.filter_by_name", "/admin", "#main", "outerHTML")
												</div>
											</th>
											<th>
												<div class="flex gap-1 items-center">
													<span>{ i18n.T(ctx, "users.email") }</span>
													@partials.SortByColumnIcon(c, p, "email", "alpha", "#main", "outerHTML", "")
													@filters.FilterByText("Email", f.Email, "users.filter_by_email", "/admin", "#main", "outerHTML")
												</div>
											</th>
											<th>
												<div class="flex gap-1 items-center">
													<span>{ i18n.T(ctx, "register.country") }</span>
													@partials.SortByColumnIcon(c, p, "country", "alpha", "#main", "outerHTML", "")
												</div>
											</th>
											<th>
												<div class="flex gap-1 items-center">
													<span>{ i18n.T(ctx, "users.phone") }</span>
													@partials.SortByColumnIcon(c, p, "phone", "alpha", "#main", "outerHTML", "")
													@filters.FilterByText("Phone", f.Phone, "users.filter_by_phone", "/admin", "#main", "outerHTML")
												</div>
											</th>
											<th>
												<div class="flex gap-1 items-center">
													<span>{ i18n.T(ctx, "users.register") }</span>
													@partials.SortByColumnIcon(c, p, "register", "alpha", "#main", "outerHTML", "")
													@filters.FilterByOptions("RegisterStatus", "users.filter_by_register_status", openuem_nats.RegisterPossibleStatus(), f.RegisterOptions, "/admin", "#main", "outerHTML", true, func() bool {
														return len(f.RegisterOptions) == 0
													})
												</div>
											</th>
											/* <th>
											<div class="flex gap-1 items-center">
												<span>{ i18n.T(ctx, "users.role") }</span>
												@partials.SortByColumnIcon(c, p, "role", "alpha", "#main", "outerHTML", "")
											</div>
										</th> */
											<th>
												<div class="flex gap-1 items-center">
													<span>{ i18n.T(ctx, "users.created") }</span>
													@partials.SortByColumnIcon(c, p, "created", "time", "#main", "outerHTML", "")
													@filters.FilterByDate("Created", "users.filter_by_creation", f.CreatedFrom, f.CreatedTo, "/admin", "#main", "outerHTML", func() bool { return f.CreatedFrom == "" && f.CreatedTo == "" })
												</div>
											</th>
											<th>
												<div class="flex gap-1 items-center">
													<span>{ i18n.T(ctx, "users.modified") }</span>
													@partials.SortByColumnIcon(c, p, "modified", "time", "#main", "outerHTML", "")
													@filters.FilterByDate("Modified", "users.filter_by_modification", f.ModifiedFrom, f.ModifiedTo, "/admin", "#main", "outerHTML", func() bool { return f.ModifiedFrom == "" && f.ModifiedTo == "" })
												</div>
											</th>
											<th>
												<div class="flex gap-1 items-center">
													<span class="sr-only">{ i18n.T(ctx, "Actions") }</span>
												</div>
											</th>
										</tr>
									</thead>
									for _, user := range users {
										<tr>
											<td>{ user.ID }</td>
											<td class="underline">
												<a
													href={ templ.URL(fmt.Sprintf("/admin/users/%s/profile", user.ID)) }
													hx-get={ string(templ.URL(fmt.Sprintf("/admin/users/%s/profile", user.ID))) }
													hx-target="#main"
													hx-swap="outerHTML"
												>
													{ user.Name }
												</a>
											</td>
											if user.Email != "" {
												<td>{ user.Email }</td>
											} else {
												<td>-</td>
											}
											if user.Country != "" {
												<td><span class={ "fi", "fi-" + strings.ToLower(user.Country) }></span></td>
											} else {
												<td>-</td>
											}
											if user.Phone != "" {
												<td>{ user.Phone }</td>
											} else {
												<td>-</td>
											}
											if user.Register == "users.completed" {
												<td class="flex">
													<uk-icon hx-history="false" icon="check" custom-class="h-5 w-5 text-green-600 mr-2" uk-cloack></uk-icon>
													{ i18n.T(ctx, user.Register) }
												</td>
											} else {
												<td class="flex">
													<uk-icon hx-history="false" icon="message-circle-warning" custom-class="h-5 w-5 text-orange-600 mr-2" uk-cloack></uk-icon>
													{ i18n.T(ctx, user.Register) }
												</td>
											}
											/* <td>- </td> */
											if user.Created.IsZero() {
												<td>-</td>
											} else {
												<td>{ user.Created.Local().Format("02/01/2006 15:04:05") }</td>
											}
											if user.Modified.IsZero() {
												<td>-</td>
											} else {
												<td>{ user.Modified.Local().Format("02/01/2006 15:04:05") }</td>
											}
											<td>
												@partials.MoreButton()
												<div class="uk-drop uk-dropdown" uk-dropdown="mode: click">
													<ul class="uk-dropdown-nav uk-nav">
														if !user.EmailVerified && user.Email != "" {
															<li>
																<a
																	hx-post={ string(templ.URL(fmt.Sprintf("/admin/users/%s/confirmemail", user.ID))) }
																	hx-target="#main"
																	hx-push-url="false"
																	hx-swap="outerHTML"
																>
																	<uk-icon hx-history="false" icon="mail-check" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>{ i18n.T(ctx, "users.verify_email") }
																</a>
															</li>
														}
														if !user.EmailVerified && user.Email != "" {
															<li>
																<a
																	hx-post={ string(templ.URL(fmt.Sprintf("/admin/users/%s/askconfirm", user.ID))) }
																	hx-target="#main"
																	hx-push-url="false"
																	hx-swap="outerHTML"
																>
																	<uk-icon hx-history="false" icon="mail-question" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>{ i18n.T(ctx, "users.resend_confirmation") }
																</a>
															</li>
														}
														if user.EmailVerified && user.Register == openuem_nats.REGISTER_IN_REVIEW {
															<li>
																<a
																	hx-post={ string(templ.URL(fmt.Sprintf("/admin/users/%s/certificate", user.ID))) }
																	hx-target="#main"
																	hx-push-url="false"
																	hx-swap="outerHTML"
																>
																	<uk-icon hx-history="false" icon="file-key" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>{ i18n.T(ctx, "users.request_certificate") }
																</a>
															</li>
														}
														if user.EmailVerified && user.Register != openuem_nats.REGISTER_IN_REVIEW {
															<li>
																<a
																	hx-target="#main"
																	hx-swap="outerHTML"
																	hx-post={ string(templ.URL("/admin/users/" + user.ID + "/renewcertificate")) }
																	hx-push-url="false"
																>
																	<uk-icon hx-history="false" icon="file-key" custom-class="h-6 w-6 pr-2" uk-cloack></uk-icon>{ i18n.T(ctx, "users.regenerate_certificate") }
																</a>
															</li>
														}
														<li>
															<a
																hx-delete={ string(templ.URL("/admin/users/" + user.ID)) }
																hx-target="#main"
																hx-push-url="false"
																hx-swap="outerHTML"
															>
																<uk-icon hx-history="false" icon="user-x" custom-class="h-6 w-6 pr-2 text-red-600" uk-cloack></uk-icon>{ i18n.T(ctx, "Delete") }
															</a>
														</li>
													</ul>
												</div>
											</td>
										</tr>
									}
								</table>
							</form>
							if p.NItems / p.PageSize > 1 {
								@partials.Pagination(c, p, "#main", "outerHTML", "")
							}
						} else {
							<p class="uk-text-small uk-text-muted mt-6">
								{ i18n.T(ctx, "users.no_users") }
							</p>
						}
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ NewUser(c echo.Context, defaultCountry string) {
	@partials.Header([]partials.Breadcrumb{{Title: "Admin", Url: "/admin/users"}, {Title: "Users", Url: "/admin/users"}})
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@ConfigNavbar("users")
				<div id="error" class="hidden"></div>
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<h3 class="uk-card-title">{ i18n.T(ctx, "new.user.title") } </h3>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "new.user.description") }
						</p>
					</div>
					<div class="uk-card-body">
						<form
							class="mt-6"
							hx-post="/admin/users/new"
							hx-target="#main"
							hx-swap="outerHTML"
						>
							<div class="flex gap-8">
								<fieldset class="uk-fieldset w-1/6">
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.uid") }</label>
										<div class="uk-form-controls">
											<input
												id="uid"
												name="uid"
												class="uk-input"
												type="text"
												placeholder={ i18n.T(ctx, "users.uid") + "..." }
												required
											/>
											<div class="uk-form-help uk-margin-small-top">
												{ i18n.T(ctx, "new.user.uid_help") }
											</div>
										</div>
									</div>
								</fieldset>
								<fieldset class="uk-fieldset w-1/6">
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.name") }</label>
										<div class="uk-form-controls">
											<input
												id="name"
												name="name"
												class="uk-input"
												type="text"
												placeholder={ i18n.T(ctx, "users.name") + "..." }
												required
											/>
										</div>
									</div>
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.email") }</label>
										<div class="uk-form-controls">
											<input
												id="email"
												name="email"
												class="uk-input"
												type="email"
												placeholder={ i18n.T(ctx, "users.email") + "..." }
												required
											/>
										</div>
									</div>
									<div class="uk-margin">
										<label for="country" class="uk-margin uk-form-label">{ i18n.T(ctx, "register.country") }</label>
										@partials.Countries(c, defaultCountry)
									</div>
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.phone") }</label>
										<div class="uk-form-controls">
											<input
												id="phone"
												name="phone"
												class="uk-input"
												type="text"
												placeholder={ i18n.T(ctx, "users.phone") + "..." }
												_="
												on blur on keyup wait 0.5s
													if phone's value is not empty										 
														get toE164(#phone.value, #country.options[#country.selectedIndex].value) put it into #phone.value
													end
												end"
											/>
										</div>
									</div>
								</fieldset>
							</div>
							<div class="flex gap-4">
								<button type="reset" class="uk-button uk-button-secondary">{ i18n.T(ctx, "Reset") }</button>
								<button id="new-user" type="submit" class="uk-button uk-button-primary">{ i18n.T(ctx, "Add") }</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ EditUser(c echo.Context, user *openuem_ent.User, defaultCountry string) {
	@partials.Header([]partials.Breadcrumb{{Title: "Admin", Url: "/admin/users"}, {Title: "Users", Url: "/admin/users"}})
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@ConfigNavbar("users")
				<div id="success" class="hidden"></div>
				<div id="error" class="hidden"></div>
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<h3 class="uk-card-title">{ i18n.T(ctx, "users.edit.title") } </h3>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "users.edit.description") }
						</p>
					</div>
					<div class="uk-card-body">
						<form
							class="mt-6"
							hx-post={ string(templ.URL(fmt.Sprintf("/admin/users/%s/profile", user.ID))) }
							hx-target="#main"
							hx-swap="outerHTML"
							hx-indicator="#update-profile-spinner"
						>
							<div class="flex gap-8">
								<fieldset class="uk-fieldset w-1/6">
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.name") }</label>
										<div class="uk-form-controls">
											<input
												id="name"
												name="name"
												class="uk-input"
												type="text"
												value={ user.Name }
												placeholder={ i18n.T(ctx, "users.name") + "..." }
												required
											/>
										</div>
									</div>
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.email") }</label>
										<div class="uk-form-controls">
											<input
												id="email"
												name="email"
												class="uk-input"
												type="email"
												value={ user.Email }
												placeholder={ i18n.T(ctx, "users.email") + "..." }
												required
											/>
										</div>
									</div>
									<div class="uk-margin">
										<label for="country" class="uk-margin uk-form-label">{ i18n.T(ctx, "register.country") }</label>
										if user.Country != "" {
											@partials.Countries(c, user.Country)
										} else {
											@partials.Countries(c, defaultCountry)
										}
									</div>
									<div class="uk-margin">
										<label class="uk-form-label" for="form-stacked-text">{ i18n.T(ctx, "users.phone") }</label>
										<div class="uk-form-controls">
											<input
												id="phone"
												name="phone"
												class="uk-input"
												type="text"
												value={ user.Phone }
												placeholder={ i18n.T(ctx, "users.phone") + "..." }
												_="
												on blur on keyup wait 0.5s
													if phone's value is not empty										 
														get toE164(#phone.value, #country.options[#country.selectedIndex].value) put it into #phone.value
													end
												end"
											/>
										</div>
									</div>
								</fieldset>
							</div>
							<div class="flex gap-4">
								<button type="reset" class="uk-button uk-button-secondary">{ i18n.T(ctx, "Reset") }</button>
								<button
									id="new-user"
									type="submit"
									class="uk-button uk-button-primary flex items-center gap-2"
								>
									{ i18n.T(ctx, "Update") }
								</button>
								<uk-icon id="update-profile-spinner" hx-history="false" icon="loader-circle" custom-class="htmx-indicator h-4 w-4 animate-spin" uk-cloack></uk-icon>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</main>
}

templ UsersIndex(title string, cmp templ.Component) {
	@layout.Base("admin") {
		@cmp
	}
}

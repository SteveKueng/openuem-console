package computers_views

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	ent "github.com/open-uem/ent"
	"github.com/open-uem/openuem-console/internal/controllers/sessions"
	"github.com/open-uem/openuem-console/internal/views/partials"
	"time"
)

templ PowerManagement(c echo.Context, p partials.PaginationAndSort, sm *sessions.SessionManager, currentVersion, latestVersion string, agent *ent.Agent, confirmDelete bool) {
	@partials.Header([]partials.Breadcrumb{{Title: "Computers", Url: "/computers"}, {Title: agent.Hostname, Url: fmt.Sprintf("/computers/%s", agent.ID)}}, sm, currentVersion, latestVersion)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				<div class="flex gap-2 items-center">
					<div class="flex items-center gap-4">
						@partials.OSBadge(agent.Os)
						<span class="uk-text-bold uk-text-large">{ agent.Hostname }</span>
					</div>
					@partials.ShowAppliedTags(agent.Edges.Tags, agent.ID, p, "/computers", "#main", "outerHTML")
					if agent.IsRemote {
						<span uk-tooltip={ fmt.Sprintf("title: %s", i18n.T(ctx, "agents.is_remote")) }>
							<uk-icon hx-history="false" icon="plane" custom-class="h-6 w-6 text-blue-600" uk-cloack></uk-icon>
						</span>
					}
				</div>
				@ComputersNavbar(agent.ID, "power", agent.VncProxyPort, confirmDelete)
				if confirmDelete {
					@partials.ConfirmDeleteAgent(c, i18n.T(ctx, "agents.confirm_delete"), "/computers", "/computers/"+agent.ID)
				}
				<div id="error" class="hidden"></div>
				<div id="success" class="hidden"></div>
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<div class="flex items-center gap-2">
							<uk-icon hx-history="false" icon="circle-power" custom-class="h-5 w-5" uk-cloack></uk-icon>
							<h3 class="uk-card-title">{ i18n.T(ctx, "agents.power_title") }</h3>
						</div>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "agents.power_description") }
						</p>
					</div>
				</div>
				<div class="uk-card uk-card-body uk-card-default flex justify-start">
					<div class="flex flex-col gap-4 w-1/3">
						if len(agent.MAC) > 0 && !agent.IsRemote {
							<form class="flex gap-4 w-full uk-form-horizontal items-end">
								<input type="hidden" name="MACAddress" value={ agent.MAC }/>
								<input type="hidden" name="IPAddress" value={ agent.IP }/>
								<button
									type="button"
									class="flex justify-start gap-4 uk-button uk-button-primary w-1/2"
									hx-post={ string(templ.URL(fmt.Sprintf("/computers/%s/power/wol", agent.ID))) }
									hx-push-url="false"
									hx-target="#main"
									hx-swap="outerHTML"
								>
									<uk-icon icon="alarm-clock" hx-history="false" uk-cloak></uk-icon>
									{ i18n.T(ctx, "WOL") }
								</button>
							</form>
						} else {
							<p class="uk-text-small uk-text-muted">
								{ i18n.T(ctx, "agents.wol_no_mac") }
							</p>
						}
						<form class="flex gap-4 w-full uk-form-horizontal items-end">
							<button
								type="button"
								class="flex justify-start gap-4 uk-button uk-button-primary w-1/2"
								hx-post={ string(templ.URL(fmt.Sprintf("/computers/%s/power/off", agent.ID))) }
								hx-push-url="false"
								hx-target="#main"
								hx-swap="outerHTML"
								_="on htmx:afterRequest set #poweroff-when.value to ''"
							>
								<uk-icon icon="power-off" hx-history="false" uk-cloak></uk-icon>
								{ i18n.T(ctx, "agents.poweroff") }
							</button>
							<div class="w-1/2">
								<label class="uk-text-small" for="poweroff-when">{ i18n.T(ctx, "When") }</label>
								<input id="poweroff-when" class="uk-input" name="when" type="datetime-local" min={ time.Now().Format("2006-01-02T15:03") }/>
							</div>
						</form>
						<form class="flex gap-4 w-full uk-form-horizontal items-end">
							<button
								type="button"
								class="flex justify-start gap-4 uk-button uk-button-primary w-1/2"
								hx-post={ string(templ.URL(fmt.Sprintf("/computers/%s/power/reboot", agent.ID))) }
								hx-push-url="false"
								hx-target="#main"
								hx-swap="outerHTML"
								_="on htmx:afterRequest set #reboot-when.value to ''"
							>
								<uk-icon icon="rotate-cw" hx-history="false" uk-cloak></uk-icon>
								{ i18n.T(ctx, "agents.reboot_short") }
							</button>
							<div class="w-1/2">
								<label class="uk-text-small" for="reboot-when">{ i18n.T(ctx, "When") }</label>
								<input id="reboot-when" class="uk-input" name="when" type="datetime-local" min={ time.Now().Format("2006-01-02T15:03") }/>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</main>
}

package computers_views

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	openuem_ent "github.com/open-uem/ent"
	"github.com/open-uem/openuem-console/internal/controllers/sessions"
	"github.com/open-uem/openuem-console/internal/views/partials"
)

templ Notes(c echo.Context, p partials.PaginationAndSort, sm *sessions.SessionManager, currentVersion, latestVersion string, agent *openuem_ent.Agent, markdown, renderedMarkdown string, confirmDelete bool) {
	@partials.Header([]partials.Breadcrumb{{Title: "Computers", Url: "/computers"}, {Title: agent.Hostname, Url: fmt.Sprintf("/computers/%s", agent.ID)}}, sm, currentVersion, latestVersion)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				<div class="flex gap-2 items-center">
					<span class="uk-text-bold uk-text-large">{ agent.Hostname }</span>
					@partials.ShowAppliedTags(agent.Edges.Tags, agent.ID, p, "/computers", "#main", "outerHTML")
					if agent.IsRemote {
						<span uk-tooltip={ fmt.Sprintf("title: %s", i18n.T(ctx, "agents.is_remote")) }>
							<uk-icon hx-history="false" icon="plane" custom-class="h-6 w-6 text-blue-600" uk-cloack></uk-icon>
						</span>
					}
				</div>
				@ComputersNavbar(agent.ID, "notes", agent.VncProxyPort, confirmDelete)
				if confirmDelete {
					@partials.ConfirmDelete(i18n.T(ctx, "agents.confirm_delete"), "/computers", "/computers/"+agent.ID, c.Request().Referer())
				}
				<div id="error" class="hidden"></div>
				<div id="success" class="hidden"></div>
				<div class="uk-card uk-card-default">
					<div class="uk-card-header">
						<h3 class="uk-card-title">{ i18n.T(ctx, "agents.notes_title") }</h3>
						<p class="uk-margin-small-top uk-text-small">{ i18n.T(ctx, "agents.notes_description") }</p>
					</div>
				</div>
				<div class="uk-card uk-card-body uk-card-default p-6">
					<form>
						@partials.MarkdownNavbar(agent.ID, renderedMarkdown)
						<article id="rendered-markdown" class={ "markdown-body uk-textarea w-1/2 h-80 max-h-80 overflow-y-auto", templ.KV("hidden", len(renderedMarkdown) == 0) }>
							@templ.Raw(renderedMarkdown)
						</article>
						<textarea id="notes" name="markdown" class={ "uk-textarea w-1/2 h-80 max-h-80 overflow-y-auto", templ.KV("hidden", len(renderedMarkdown) > 0 ) } placeholder={ i18n.T(ctx, "notes.no_notes") } spellcheck="false">{ markdown }</textarea>
					</form>
				</div>
			</div>
		</div>
	</main>
}

package computers_views

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	ent "github.com/open-uem/ent"
	"github.com/open-uem/openuem-console/internal/views/partials"
)

var connectVNCHandle = templ.NewOnceHandle()

templ RemoteAssistance(c echo.Context, p partials.PaginationAndSort, agent *ent.Agent, confirmDelete bool, commonInfo *partials.CommonInfo) {
	@partials.Header([]partials.Breadcrumb{{Title: "Computers", Url: string(templ.URL(fmt.Sprintf("/tenant/%s/site/%s/computers", commonInfo.TenantID, commonInfo.SiteID)))}, {Title: agent.Hostname, Url: fmt.Sprintf("/tenant/%s/site/%s/computers/%s", commonInfo.TenantID, commonInfo.SiteID, agent.ID)}}, *commonInfo)
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				<div class="flex gap-2 items-center">
					<div class="flex items-center gap-4">
						@partials.OSBadge(agent.Os)
						<span class="uk-text-bold uk-text-large">{ agent.Hostname }</span>
					</div>
					@partials.ShowAppliedTags(agent.Edges.Tags, agent.ID, p, string(templ.URL(fmt.Sprintf("/tenant/%s/site/%s/computers", commonInfo.TenantID, commonInfo.SiteID))), "#main", "outerHTML")
					if agent.IsRemote && commonInfo.DetectRemoteAgents {
						<span uk-tooltip={ fmt.Sprintf("title: %s", i18n.T(ctx, "agents.is_remote")) }>
							<uk-icon hx-history="false" icon="plane" custom-class="h-6 w-6 text-blue-600" uk-cloack></uk-icon>
						</span>
					}
				</div>
				@ComputersNavbar(agent.ID, "remote-assistance", agent.VncProxyPort, confirmDelete, commonInfo)
				if confirmDelete {
					@partials.ConfirmDeleteAgent(c, i18n.T(ctx, "agents.confirm_delete"), string(templ.URL(fmt.Sprintf("/tenant/%s/site/%s/computers", commonInfo.TenantID, commonInfo.SiteID))), string(templ.URL(fmt.Sprintf("/tenant/%s/site/%s/computers/%s", commonInfo.TenantID, commonInfo.SiteID, agent.ID))))
				}
				<div id="success" class="hidden"></div>
				<div id="error" class="hidden"></div>
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<div class="flex items-center gap-2">
							<uk-icon hx-history="false" icon="life-buoy" custom-class="h-5 w-5" uk-cloack></uk-icon>
							<h3 class="uk-card-title">{ i18n.T(ctx, "agents.vnc_title") }</h3>
						</div>
						<p class="uk-margin-small-top uk-text-small">{ i18n.T(ctx, "agents.vnc_description") }</p>
					</div>
				</div>
				<div class="uk-card uk-card-body uk-card-default">
					if len(agent.IP) != 0 && len(agent.Vnc) != 0 && len(agent.Edges.Operatingsystem.Username) != 0 && agent.CertificateReady && (!commonInfo.DetectRemoteAgents || (commonInfo.DetectRemoteAgents && !agent.IsRemote)) && agent.RemoteAssistance {
						<div id="vnc">
							<a
								class="flex gap-2 items-center uk-text-small"
								target="_blank"
								rel="noopener"
								href={ templ.URL(fmt.Sprintf("/tenant/%s/site/%s/computers/%s/startvnc", commonInfo.TenantID, commonInfo.SiteID, agent.ID)) }
							>
								<uk-icon hx-history="false" icon="screen-share" custom-class="h-5 w-5" uk-cloak></uk-icon> { i18n.T(ctx, "agents.vnc_new_tab") }
							</a>
						</div>
					} else {
						if !agent.CertificateReady {
							<p class="uk-text-small uk-text-muted">
								{ i18n.T(ctx, "agents.no_vnc_certificate") }
							</p>
						} else {
							<p class="uk-text-small uk-text-muted">
								{ i18n.T(ctx, "agents.no_supported_vnc") }
							</p>
						}
					}
				</div>
			</div>
		</div>
	</main>
}

package security_views

import (
	"fmt"
	"github.com/doncicuto/openuem-console/internal/models"
	"github.com/doncicuto/openuem-console/internal/views/filters"
	"github.com/doncicuto/openuem-console/internal/views/partials"
	"github.com/gohugoio/locales"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"strconv"
)

templ Antivirus(c echo.Context, p partials.PaginationAndSort, f filters.AntivirusFilter, l locales.Translator, antiviri []models.Antivirus, detectedAntiviri, availableOSes []string, refresh int) {
	@partials.Header([]partials.Breadcrumb{{Title: i18n.T(ctx, "Security"), Url: "/security"}, {Title: "Antivirus", Url: "/security/antivirus"}})
	<main class="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8">
		<div class="uk-width-1-2@m uk-card uk-card-default">
			<div class="uk-card-body uk-flex uk-flex-column gap-4">
				@SecurityNavbar("antivirus")
				<div id="success" class="hidden"></div>
				<div id="error" class="hidden"></div>
				<div class="uk-width-1-2@m uk-card uk-card-default">
					<div class="uk-card-header">
						<h3 class="uk-card-title">{ i18n.T(ctx, "antivirus.title") }</h3>
						<p class="uk-margin-small-top uk-text-small">
							{ i18n.T(ctx, "antivirus.description") }
						</p>
					</div>
					<div class="uk-card-body flex flex-col gap-4">
						<div class="flex justify-between mt-8">
							@filters.ClearFilters("/security", "#main", "outerHTML", func() bool {
								return len(f.Hostname) == 0 && len(f.AgentOSVersions) == 0 && len(f.AntivirusNameOptions) == 0 &&
									len(f.AntivirusEnabledOptions) == 0 && len(f.AntivirusUpdatedOptions) == 0
							
							})
							@partials.RefreshPage(l, "/security", "#main", "outerHTML", "post", refresh, true)
						</div>
						if len(antiviri) > 0 {
							<table class="uk-table uk-table-divider uk-table-small uk-table-striped border border-gray-400!important">
								<form class="mt-5 mb-2">
									<input id="page" type="hidden" name="page" value={ strconv.Itoa(p.CurrentPage) }/>
									<input id="pageSize" type="hidden" name="pageSize" value={ strconv.Itoa(p.PageSize) }/>
									<input id="sortBy" type="hidden" name="sortBy" value={ p.SortBy }/>
									<input id="sortOrder" type="hidden" name="sortOrder" value={ p.SortOrder }/>
									<thead>
										<tr>
											<th>
												<div class="flex gap-1 items-center">
													<span>{ i18n.T(ctx, "updates.hostname") }</span>
													@partials.SortByColumnIcon(c, p, i18n.T(ctx, "updates.hostname"), "hostname", "alpha", "#main", "outerHTML")
													@filters.FilterByText(c, p, "Hostname", f.Hostname, "agents.filter_by_hostname", "#main", "outerHTML")
												</div>
											</th>
											<th>
												<div class="flex gap-1 items-center">
													<span>{ i18n.T(ctx, "antivirus.os") }</span>
													@partials.SortByColumnIcon(c, p, i18n.T(ctx, "antivirus.os"), "agentOS", "alpha", "#main", "outerHTML")
													@filters.FilterByOptions(c, p, "AgentOS", "agents.filter_by_agent_os", availableOSes, f.AgentOSVersions, "#main", "outerHTML", false, func() bool {
														return len(f.AgentOSVersions) == 0
													})
												</div>
											</th>
											<th>
												<div class="flex gap-1 items-center">
													<span>{ i18n.T(ctx, "antivirus.title") }</span>
													@partials.SortByColumnIcon(c, p, i18n.T(ctx, "antivirus.title"), "antivirusName", "alpha", "#main", "outerHTML")
													@filters.FilterByOptions(c, p, "AntivirusName", "antivirus.filter_by_name", detectedAntiviri, f.AntivirusNameOptions, "#main", "outerHTML", false, func() bool {
														return len(f.AntivirusNameOptions) == 0
													})
												</div>
											</th>
											<th>
												<div class="flex gap-2 items-center justify-center">
													<span>{ i18n.T(ctx,"antivirus.enabled") }</span>
													@partials.SortByColumnIcon(c, p, i18n.T(ctx, "antivirus.enabled"), "antivirusEnabled", "alpha", "#main", "outerHTML")
													@filters.FilterByOptions(c, p, "AntivirusEnabled", "antivirus.filter_by_enabled", []string{"Enabled", "Disabled"}, f.AntivirusEnabledOptions, "#main", "outerHTML", true, func() bool {
														return len(f.AntivirusEnabledOptions) == 0
													})
												</div>
											</th>
											<th>
												<div class="flex gap-2 items-center justify-center">
													<span>{ i18n.T(ctx,"antivirus.updated") }</span>
													@partials.SortByColumnIcon(c, p, i18n.T(ctx, "antivirus.updated"), "antivirusUpdated", "alpha", "#main", "outerHTML")
													@filters.FilterByOptions(c, p, "AntivirusUpdated", "antivirus.filter_by_updated", []string{"UpdatedYes", "UpdatedNo"}, f.AntivirusUpdatedOptions, "#main", "outerHTML", true, func() bool {
														return len(f.AntivirusUpdatedOptions) == 0
													})
												</div>
											</th>
										</tr>
									</thead>
								</form>
								<tbody>
									for _, antivirus := range antiviri {
										<tr>
											<td
												class="!align-middle underline cursor-pointer"
												hx-get={ string(templ.URL(fmt.Sprintf("/computers/%s", antivirus.ID))) }
												hx-push-url="true"
												hx-target="#main"
												hx-swap="outerHTML"
											>
												{ antivirus.Hostname }
											</td>
											<td>
												switch antivirus.OS {
													case "windows":
														<i class="ri-windows-fill ri-2x text-blue-600"></i>
													case "linux":
														<span></span>
												}
											</td>
											<td>{ antivirus.Name }</td>
											if antivirus.IsActive {
												<td><uk-icon hx-history="false" icon="shield-check" custom-class="mx-auto h-5 w-5 text-green-600" uk-cloack></uk-icon></td>
											} else {
												<td><uk-icon hx-history="false" icon="shield-x" custom-class="mx-auto h-5 w-5 text-red-600" uk-cloack></uk-icon></td>
											}
											if antivirus.IsUpdated {
												<td><uk-icon hx-history="false" icon="shield-check" custom-class="mx-auto h-5 w-5 text-green-600" uk-cloack></uk-icon></td>
											} else {
												<td><uk-icon hx-history="false" icon="shield-x" custom-class="mx-auto h-5 w-5 text-red-600" uk-cloack></uk-icon></td>
											}
										</tr>
									}
								</tbody>
							</table>
							@partials.Pagination(c, p, "#main", "outerHTML", "")
						} else {
							<p class="uk-text-small uk-text-muted">
								{ i18n.T(ctx, "antivirus.no_antivirus_yet") }
							</p>
						}
					</div>
				</div>
			</div>
		</div>
	</main>
}

package partials

import (
	"github.com/biter777/countries"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/labstack/echo/v4"
	"sort"
	"strings"
)

type Country struct {
	Name string
	Code string
}

templ Countries(c echo.Context, code string) {
	<div class="flex gap-4">
		<div id="flag" class={ "fi", "fi-" + strings.ToLower(code) }></div>
		<select
			id="country"
			name="country"
			class="uk-select"
			autocomplete="off"
			_="on change 
				set flag to #country.value.toLowerCase() 
				set #flag[@class] to `fi fi-$flag`  

				
		end"
		>
			<option value="">{ i18n.T(ctx, "SelectCountry") }</option>
			for _, country := range GetCountries(c) {
				<option value={ country.Code } selected?={ code == country.Code }>{ country.Name }</option>
			}
		</select>
	</div>
}

func GetCountries(c echo.Context) []Country {
	var translatedCountries []Country

	for _, country := range countries.All() {
		if country.String() != "Yugoslavia" && country.String() != "Aland Islands" && country.String() != "Western Sahara" && country.String() != "Mayotte" 
		&& country.String() != "Macau (Special Administrative Region of China)" {
			translatedCountries = append(translatedCountries, Country{
				Name: i18n.T(c.Request().Context(), "countries."+country.String()),
				Code: country.Info().Alpha2,
			})
		}
	}

	sort.Slice(translatedCountries, func(i, j int) bool {
		return translatedCountries[i].Name < translatedCountries[j].Name
	})
	return translatedCountries
}

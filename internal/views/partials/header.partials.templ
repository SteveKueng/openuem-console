package partials

import (
	"context"
	"fmt"
	"github.com/gohugoio/locales"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/open-uem/ent"
	"github.com/open-uem/openuem-console/internal/controllers/sessions"
	"golang.org/x/mod/semver"
	"strconv"
)

type Breadcrumb struct {
	Title string
	Url   string
}

type CommonInfo struct {
	SM                 *sessions.SessionManager
	CurrentVersion     string
	LatestVersion      string
	Tenants            []*ent.Tenant
	Sites              []*ent.Site
	TenantID           string
	SiteID             string
	DetectRemoteAgents bool
	Translator         locales.Translator
}

templ Header(breadcrumbs []Breadcrumb, c CommonInfo) {
	<header class="sticky top-0 z-30 flex justify-between w-full h-14 items-center border-b bg-background px-4 sm:static sm:h-auto sm:border-0 sm:bg-transparent sm:px-6">
		<nav id="header" class="flex">
			<ul class="uk-breadcrumb" aria-label="Breadcrumb">
				<li class="uk-text-muted uk-text-bold">OpenUEM</li>
				for _,bc := range breadcrumbs {
					<li>
						<a
							href={ templ.URL(bc.Url) }
							hx-get={ string(templ.URL(bc.Url)) }
							hx-target="#main"
							hx-swap="outerHTML"
							hx-push-url="true"
						>
							{ i18n.T(ctx, bc.Title, i18n.Default(bc.Title)) }
						</a>
					</li>
				}
			</ul>
		</nav>
		<div class="flex items-center gap-4">
			<form class="flex items-center gap-1">
				<span class="uk-text-muted">
					<uk-icon hx-history="false" icon="globe" custom-class="h-6 w-6" uk-cloack></uk-icon>
				</span>
				<select title={ i18n.T(ctx, "Organization") } class="uk-select" name="tenant">
					for _, t := range c.Tenants {
						if t.Description == "DefaultTenant" {
							<option class="!align-middle" value={ strconv.Itoa(t.ID) } selected?={ c.TenantID ==  strconv.Itoa(t.ID) }>{ i18n.T(ctx,t.Description) }</option>
						} else {
							<option class="!align-middle" value={ strconv.Itoa(t.ID) } selected?={ c.TenantID ==  strconv.Itoa(t.ID) }>{ t.Description }</option>
						}
					}
				</select>
			</form>
			<form class="flex items-center gap-2">
				<span class="uk-text-muted">
					<uk-icon hx-history="false" icon="building" custom-class="h-6 w-6" uk-cloack></uk-icon>
				</span>
				<select title={ i18n.T(ctx, "Site") } class="uk-select" name="site">
					for _, s := range c.Sites {
						if s.Description == "DefaultSite" {
							<option value={ strconv.Itoa(s.ID) } selected?={ c.SiteID ==  strconv.Itoa(s.ID) }>{ i18n.T(ctx,s.Description) }</option>
						} else {
							<option value={ strconv.Itoa(s.ID) } selected?={ c.SiteID ==  strconv.Itoa(s.ID) }>{ s.Description }</option>
						}
					}
				</select>
			</form>
			<a
				href="#"
				_="
					on load
						if localStorage.mode is 'dark' then
							add [@icon=sun] to #theme-switch
							add [@custom-class=h-6 w-6 uk-text-muted] to #theme-switch
						else
							add [@icon=moon] to #theme-switch
							add [@custom-class=h-6 w-6] to #theme-switch
						end
					end

					on click
						if localStorage.mode is 'dark' then
							set localStorage.mode to ''
							remove .dark from <html/>
							add [@icon=moon] to #theme-switch
							add [@custom-class=h-6 w-6] to #theme-switch
						else
							set localStorage.mode to 'dark'
							add .dark to <html/>
							add [@icon=sun] to #theme-switch
							add [@custom-class=h-6 w-6 uk-text-muted] to #theme-switch
						end
					end"
			>
				<uk-icon id="theme-switch" hx-history="false" icon="moon" custom-class="h-6 w-6" uk-cloack></uk-icon>
			</a>
			<div class="flex items-center gap-4">
				<p class="text-sm uk-text-muted">OpenUEM { c.CurrentVersion }</p>
				if newVersionAvailable(c.CurrentVersion, c.LatestVersion) {
					<a
						href={ templ.URL(fmt.Sprintf("/tenant/%s/site/%s/admin/update-servers", c.TenantID, c.SiteID)) }
						hx-get={ string(templ.URL(fmt.Sprintf("/tenant/%s/site/%s/admin/update-servers", c.TenantID, c.SiteID))) }
						hx-push-url="true"
						hx-target="#main"
						hx-swap="outerHTML"
						uk-tooltip={ fmt.Sprintf("title: %s %s; pos: right", i18n.T(ctx, "admin.update.servers.new_version_available"), c.LatestVersion) }
					>
						<uk-icon hx-history="false" icon="cloud-download" custom-class="h-6 w-6 text-blue-600" uk-cloack></uk-icon>
					</a>
				}
			</div>
			<button title={ i18n.T(ctx, "Profile") } type="button" class="rounded-full uk-text-muted"><uk-icon hx-history="false" icon="user-circle" hx-history="false" custom-class="h-6 w-6" uk-cloack></uk-icon></button>
			<div class="uk-drop uk-dropdown" uk-dropdown="mode: click">
				<div class="flex flex-col gap-1">
					<div class="flex justify-center mt-4 mb-1">
						<uk-icon hx-history="false" icon="circle-user" custom-class="h-14 w-14 text-green-800" uk-cloack></uk-icon>
					</div>
					<p class="text-center uk-text-muted uk-text-small">{ GetUID(ctx, c.SM) }</p>
					<p class="text-center">{ GetUsername(ctx, c.SM) }</p>
					<button
						title={ i18n.T(ctx, "LogOut") }
						href="/logout"
						hx-post="/logout"
						hx-push-url="false"
						hx-target="body"
						uk-tooltip={ fmt.Sprintf("title: %s; pos: right", i18n.T(ctx, "LogOut")) }
						class={ "flex gap-2 items-center justify-center p-1 mb-4" }
					>
						<span class="uk-text-small uk-text-muted underline">{ i18n.T(ctx, "LogOut") }</span>
					</button>
				</div>
			</div>
		</div>
	</header>
}

func GetUID(ctx context.Context, sm *sessions.SessionManager) string {
	uid, ok := sm.Manager.Get(ctx, "uid").(string)
	if !ok || len(uid) == 0 {
		return "unknown"
	}

	return uid
}

func GetUsername(ctx context.Context, sm *sessions.SessionManager) string {
	username, ok := sm.Manager.Get(ctx, "username").(string)
	if !ok {
		return ""
	}

	return username
}

func newVersionAvailable(currentVersion, latestVersion string) bool {
	return semver.Compare("v"+latestVersion, "v"+currentVersion) == 1
}
